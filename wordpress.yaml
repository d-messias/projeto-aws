AWSTemplateFormatVersion: 2010-09-09
Parameters:
  KeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Description: Select a VPC that allows instances to access the Internet.
  SubnetId:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: Select at least two subnets in your selected VPC.
  DesiredCapacity:
    Type: Number
    Default: "1"
    Description: Number of instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Default: "1"
    Description: Maximum number of instances that can be launched in your ECS cluster.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
    ConstraintDescription: Please choose a valid instance type.
  DBClass:
    Description: Database instance class
    Type: String
    Default: db.t2.small
    AllowedValues:
      - db.t1.micro
      - db.m1.small
      - db.m1.medium
      - db.t2.micro
      - db.t2.small
      - db.t2.medium
      - db.t2.large
    ConstraintDescription: must select a valid database instance type.
  DBName:
    Default: wordpressdb
    Description: The WordPress database name
    Type: String
    MinLength: "1"
    MaxLength: "64"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBUser:
    NoEcho: "true"
    Description: The WordPress database admin account username
    Type: String
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: "true"
    Description: The WordPress database admin account password
    Type: String
    MinLength: "8"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.
  MultiAZDatabase:
    Description: Create a Multi-AZ database deployment
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
  DBAllocatedStorage:
    Description: The amount of storage (in GB) to allocate to the database
    Type: Number
    Default: 20
    MinValue: 5
    MaxValue: 1024
Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-09bee01cc997a78a6
Resources:
  ECSCluster:
    Type: "AWS::ECS::Cluster"
  EcsSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref VpcId
  EcsSecurityGroupHTTPinbound:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0
  EcsSecurityGroupSSHinbound:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0
  EcsSecurityGroupALBports:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref EcsSecurityGroup
      IpProtocol: tcp
      FromPort: 31000
      ToPort: 61000
      SourceSecurityGroupId: !Ref EcsSecurityGroup
  CloudwatchLogsGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Join
        - "-"
        - - ECSLogGroup
          - !Ref "AWS::StackName"
      RetentionInDays: 14
  DBInstance:
    Type: "AWS::RDS::DBInstance"
    Properties:
      DBName: !Ref DBName
      Engine: MySQL
      MultiAZ: !Ref MultiAZDatabase
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: !Ref DBClass
      AllocatedStorage: !Ref DBAllocatedStorage
      VPCSecurityGroups:
        - !GetAtt
          - DBEC2SecurityGroup
          - GroupId
  taskdefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: !Join
        - ""
        - - !Ref "AWS::StackName"
          - "-ecs-demo-app"
      ContainerDefinitions:
        - Name: simple-app
          Cpu: "10"
          Essential: "true"
          Image: "httpd:2.4"
          Memory: "300"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudwatchLogsGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs-demo-app
          MountPoints:
            - ContainerPath: /usr/local/apache2/htdocs
              SourceVolume: my-vol
          PortMappings:
            - ContainerPort: 80
      Volumes:
        - Name: my-vol
          Host: {}
  ALB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Join
        - "-"
        - - !Ref "AWS::StackName"
          - "ALB"
      Subnets: !Ref SubnetId
      SecurityGroups:
        - !Ref EcsSecurityGroup
      Scheme: internet-facing
  Listener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            ContentType: text/plain
            StatusCode: 200
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
  TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: !Join
        - "-"
        - - !Ref "AWS::StackName"
          - "TG"
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VpcId
  WebServerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Enable HTTP access via port 80 locked down to the load balancer + SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          SourceSecurityGroupId: !Select
            - 0
            - !GetAtt
              - ALB
              - SecurityGroups
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId

  WebServerLaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          wordpress_install:
            - install_cfn
            - install_wordpress
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join 
                - ''
                - - |
                    [main]
                  - stack=
                  - !Ref 'AWS::StackId'
                  - |+

                  - region=
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join 
                - ''
                - - |
                    [cfn-auto-reloader-hook]
                  - |
                    triggers=post.update
                  - >
                    path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                  - 'action=/opt/aws/bin/cfn-init -v '
                  - '         --stack '
                  - !Ref 'AWS::StackName'
                  - '         --resource LaunchConfig '
                  - '         --configsets wordpress_install '
                  - '         --region '
                  - !Ref 'AWS::Region'
                  - |+

              mode: '000400'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_wordpress:
          packages:
            yum:
              php73: []
              php73-mysqlnd: []
              mysql57: []
              httpd24: []
          sources:
            /var/www/html: 'http://wordpress.org/latest.tar.gz'
          files:
            /tmp/create-wp-config:
              content: !Join 
                - ''
                - - |
                    #!/bin/bash
                  - >
                    cp /var/www/html/wordpress/wp-config-sample.php
                    /var/www/html/wordpress/wp-config.php
                  - sed -i "s/'database_name_here'/'
                  - !Ref DBName
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'username_here'/'
                  - !Ref DBUser
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'password_here'/'
                  - !Ref DBPassword
                  - |
                    '/g" wp-config.php
                  - sed -i "s/'localhost'/'
                  - !GetAtt 
                    - DBInstance
                    - Endpoint.Address
                  - |
                    '/g" wp-config.php
              mode: '000500'
              owner: root
              group: root
          commands:
            01_configure_wordpress:
              commands:
                        #!/bin/bash 
                      - /tmp/create-wp-config
                      - /var/www/html/wordpress -type d -exec chmod 755
                      - /var/www/html/wordpress -type f -exec chmod 644
              cwd: /var/www/html/wordpress
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
    Properties:
      ImageId: ami-09bee01cc997a78a6
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -xe
            - |
              yum update -y aws-cfn-bootstrap
            - '/opt/aws/bin/cfn-init -v '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource LaunchConfig '
            - '         --configsets wordpress_install '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+

            - '/opt/aws/bin/cfn-signal -e $? '
            - '         --stack '
            - !Ref 'AWS::StackName'
            - '         --resource WebServerGroup '
            - '         --region '
            - !Ref 'AWS::Region'
            - |+      

      
            # - '/tmp/wp_permissions.sh: '
            # - ' content: | '
            #       #!/bin/bash
            # -     chown -R apache:apache /var/www/html/wordpress
            # -     find /var/www/html/wordpress -type d -exec chmod 755 {} \;
            # -     find /var/www/html/wordpress -type f -exec chmod 644 {} \;

            - commands:
            -   01_install_wp:
            -     command: sh /tmp/wp_install.sh
            -   02_set_permissions:
            -     command: sh /tmp/wp_permissions.sh

            - configure:
            -   files:
            -    /etc/httpd/conf.d/wordpress.conf:
            -      content: |
            -        Alias /wordpress /var/www/html/wordpress
            -        <Directory /var/www/html/wordpress>
            -          AllowOverride All
            -          Order allow,deny
            -          Allow from all
            -        </Directory}
        

        # Metadata:
        #    "AWS::CloudFormation::Init":
          #   configSets:
          #     install_and_configure:
          #       - install
          #       - configure

            # install:
            #   packages:
            #     yum:
            #       httpd: []
            #       php: []
            #       php-mysql: []
            #       mysql: []

            #   sources:
            #     /var/www/html: "http://wordpress.org/latest.tar.gz"

            # files:
            #   /tmp/wp_install.sh:
            #     content: |
            #       #!/bin/bash
            #       tar -xzf /var/www/html/latest.tar.gz -C /var/www/html
            #       cp /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php
            #       sed -i "s/'database_name_here'/'${DBName}'/g" /var/www/html/wordpress/wp-config.php
            #       sed -i "s/'username_here'/'${DBUser}'/g" /var/www/html/wordpress/wp-config.php
            #       sed -i "s/'password_here'/'${DBPassword}'/g" /var/www/html/wordpress/wp-config.php
            #       sed -i "s/'localhost'/'"Fn::GetAtt": ["DBInstance", "Endpoint.Address"]"'/g" /var/www/html/wordpress/wp-config.php


  WebServerGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      VPCZoneIdentifier: !Ref SubnetId
      LaunchConfigurationName: !Ref WebServerLaunchConfig
      MinSize: 1
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      TargetGroupARNs:
        - !Ref TargetGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: "1"
        MaxBatchSize: "1"
        PauseTime: PT15M
        WaitOnResourceSignals: "true"
  DBEC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "3306"
          ToPort: "3306"
          SourceSecurityGroupId: !Ref WebServerSecurityGroup
      VpcId: !Ref VpcId
Outputs:
  WordPressURL:
    Description: URL do WordPress instalado
    Value: !Sub "http://${ALB.DNSName}/wordpress"
